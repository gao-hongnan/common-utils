import logging
import shutil
from pathlib import Path
from unittest.mock import patch

import pytest

from common_utils.core.logger import Logger


@pytest.fixture(scope="function")
def log_dir():
    """
    Fixture to create and remove a test log folder for tests.

    Yields
    ------
    str
        The path of the test log folder.
    """
    test_log_dir = "test_outputs"
    Path(test_log_dir).mkdir(parents=True, exist_ok=True)
    yield test_log_dir
    shutil.rmtree(test_log_dir)


@pytest.mark.parametrize(
    "module_name, level, propagate",
    [
        (None, logging.INFO, False),
        ("test_module", logging.DEBUG, True),
        ("test_module", logging.WARNING, False),
    ],
)
def test_logger_init(log_dir, module_name, level, propagate):
    """
    Test the initialization of the Logger class.

    Parameters
    ----------
    log_dir : str
        The path of the test log folder.
    module_name : str
        The name of the module for the logger.
    level : int
        The logging level.
    propagate : bool
        Whether the logger should propagate messages.
    """
    logger_obj = Logger(
        log_file="test_log.txt",
        module_name=module_name,
        level=level,
        propagate=propagate,
        log_root_dir=log_dir,
    )

    assert logger_obj.logger.level == level
    assert logger_obj.logger.propagate == propagate

    # usage of patch and mock
    with patch("common_utils.core.logger.__name__", "__main__"):
        logger_obj = Logger(
            log_file="test_log.txt",
            module_name=module_name,
            level=level,
            propagate=propagate,
            log_root_dir=log_dir,
        )

    assert logger_obj.logger.name == (module_name or "__main__")

    log_file_path = logger_obj.session_log_dir / logger_obj.log_file
    assert log_file_path.exists()


@pytest.mark.parametrize(
    "level, message",
    [
        (logging.INFO, "Test info message"),
        (logging.WARNING, "Test warning message"),
        (logging.ERROR, "Test error message"),
        (logging.CRITICAL, "Test critical message"),
    ],
)
def test_logger_messages(log_dir, level, message):
    """
    Test the logging messages generated by the Logger class.

    Parameters
    ----------
    log_dir : str
        The path of the test log folder.
    level : int
        The logging level of the message.
    message : str
        The content of the log message.
    """
    logger_obj = Logger(
        log_file="test_log.txt",
        module_name="test_module",
        level=logging.DEBUG,
        propagate=False,
        log_root_dir=log_dir,
    )

    logger_obj.logger.log(level, message)

    log_file_path = logger_obj.session_log_dir / logger_obj.log_file
    with log_file_path.open("r") as log_file:
        log_content = log_file.read()
        assert message in log_content
        assert logging.getLevelName(level) in log_content
